/* Find's EMIRP Integers
 Integers returned are not palindromes
  But when reversed they are still primes*/
public class emirp {
    public static void main(String [] args){
        int emirpCount = 0;
        int i = 1;
        while (emirpCount != 100){
            i++;
            if (isPrime(i) == true){
                if (isPalindrome(i) == false) {
                    if (isPrime(palindrome(i))) {
                        emirpCount++;
                        System.out.println("Emirp: " + i);
                    }
                }
            }
        }
    }
    public static boolean isPrime(int n){
        for(int o = 2; o < n; o++){
            if(n%o == 0){
                return false;
            }
        }
        return true;
    }
    public static boolean isPalindrome(int n){
        int numLength = Integer.toString(n).length();
        int newNumber = 0;
        int genNumber = n;
        for(int i = 0; i < numLength; i++){
            newNumber *= 10;
            newNumber += genNumber % 10;
            genNumber /= 10;
        }
        if(newNumber == n){
            return true;
        }
        else return false;
    }
    public static int palindrome(int n){
        int numLength = Integer.toString(n).length();
        int newNumber = 0;
        int genNumber = n;
        for(int i = 0; i < numLength; i++){
            newNumber *= 10;
            newNumber += genNumber % 10;
            genNumber /= 10;
        }
        return newNumber;
    }
}
